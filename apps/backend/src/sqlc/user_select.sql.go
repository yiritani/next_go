// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_select.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const selectUser = `-- name: SelectUser :one
SELECT id, name, email, created_at from "user" WHERE "id" = $1
`

func (q *Queries) SelectUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserInEmail = `-- name: SelectUserInEmail :many
SELECT id, name, email, created_at from "user" WHERE "email" IN ($1)
`

func (q *Queries) SelectUserInEmail(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.Query(ctx, selectUserInEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
