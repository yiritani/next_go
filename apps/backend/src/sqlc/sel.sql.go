// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sel.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSystem = `-- name: GetSystem :one
SELECT id, system_name, created_at from "system" WHERE "id" = $1
`

func (q *Queries) GetSystem(ctx context.Context, id pgtype.UUID) (System, error) {
	row := q.db.QueryRow(ctx, getSystem, id)
	var i System
	err := row.Scan(&i.ID, &i.SystemName, &i.CreatedAt)
	return i, err
}

const getSystemUsers = `-- name: GetSystemUsers :many
SELECT
"system".id as system_id,
"user".id as user_id,
"user".name as user_name
from "system"
INNER JOIN "user" ON "system"."id" = "user"."system_id"
`

type GetSystemUsersRow struct {
	SystemID pgtype.UUID
	UserID   pgtype.UUID
	UserName string
}

func (q *Queries) GetSystemUsers(ctx context.Context) ([]GetSystemUsersRow, error) {
	rows, err := q.db.Query(ctx, getSystemUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemUsersRow
	for rows.Next() {
		var i GetSystemUsersRow
		if err := rows.Scan(&i.SystemID, &i.UserID, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, system_id, name, email, created_at from "user" WHERE "id" = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SystemID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
