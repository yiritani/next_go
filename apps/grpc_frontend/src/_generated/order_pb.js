// source: order.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.file.CreateOrderRequest', null, global);
goog.exportSymbol('proto.file.CreateOrderResponse', null, global);
goog.exportSymbol('proto.file.ListOrdersRequest', null, global);
goog.exportSymbol('proto.file.ListOrdersResponse', null, global);
goog.exportSymbol('proto.file.Order', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.Order = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.Order.displayName = 'proto.file.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.ListOrdersRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.ListOrdersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.ListOrdersRequest.displayName = 'proto.file.ListOrdersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.ListOrdersResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.file.ListOrdersResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.file.ListOrdersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.ListOrdersResponse.displayName = 'proto.file.ListOrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.CreateOrderRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.CreateOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.CreateOrderRequest.displayName = 'proto.file.CreateOrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.CreateOrderResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.CreateOrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.CreateOrderResponse.displayName = 'proto.file.CreateOrderResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.file.Order.prototype.toObject = function (opt_includeInstance) {
    return proto.file.Order.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.file.Order} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.file.Order.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        orderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        username: jspb.Message.getFieldWithDefault(msg, 3, ''),
        productId: jspb.Message.getFieldWithDefault(msg, 4, 0),
        quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
        orderDate: jspb.Message.getFieldWithDefault(msg, 6, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.Order}
 */
proto.file.Order.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.Order();
  return proto.file.Order.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.Order}
 */
proto.file.Order.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setOrderId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setProductId(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setQuantity(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setOrderDate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.Order.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.file.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.Order.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getOrderDate();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.file.Order.prototype.getUserId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 order_id = 2;
 * @return {number}
 */
proto.file.Order.prototype.getOrderId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setOrderId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string username = 3;
 * @return {string}
 */
proto.file.Order.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setUsername = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int64 product_id = 4;
 * @return {number}
 */
proto.file.Order.prototype.getProductId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setProductId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int64 quantity = 5;
 * @return {number}
 */
proto.file.Order.prototype.getQuantity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string order_date = 6;
 * @return {string}
 */
proto.file.Order.prototype.getOrderDate = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.file.Order} returns this
 */
proto.file.Order.prototype.setOrderDate = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.file.ListOrdersRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.file.ListOrdersRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.file.ListOrdersRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.file.ListOrdersRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.ListOrdersRequest}
 */
proto.file.ListOrdersRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.ListOrdersRequest();
  return proto.file.ListOrdersRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.ListOrdersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.ListOrdersRequest}
 */
proto.file.ListOrdersRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.ListOrdersRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.file.ListOrdersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.ListOrdersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.ListOrdersRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
};

/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.file.ListOrdersRequest.prototype.getUserId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.ListOrdersRequest} returns this
 */
proto.file.ListOrdersRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.file.ListOrdersResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.file.ListOrdersResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.file.ListOrdersResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.file.ListOrdersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.file.ListOrdersResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ordersList: jspb.Message.toObjectList(
          msg.getOrdersList(),
          proto.file.Order.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.ListOrdersResponse}
 */
proto.file.ListOrdersResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.ListOrdersResponse();
  return proto.file.ListOrdersResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.ListOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.ListOrdersResponse}
 */
proto.file.ListOrdersResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.file.Order();
        reader.readMessage(value, proto.file.Order.deserializeBinaryFromReader);
        msg.addOrders(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.ListOrdersResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.file.ListOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.ListOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.ListOrdersResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.file.Order.serializeBinaryToWriter);
  }
};

/**
 * repeated Order Orders = 1;
 * @return {!Array<!proto.file.Order>}
 */
proto.file.ListOrdersResponse.prototype.getOrdersList = function () {
  return /** @type{!Array<!proto.file.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.file.Order, 1)
  );
};

/**
 * @param {!Array<!proto.file.Order>} value
 * @return {!proto.file.ListOrdersResponse} returns this
 */
proto.file.ListOrdersResponse.prototype.setOrdersList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.file.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.file.Order}
 */
proto.file.ListOrdersResponse.prototype.addOrders = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.file.Order,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.file.ListOrdersResponse} returns this
 */
proto.file.ListOrdersResponse.prototype.clearOrdersList = function () {
  return this.setOrdersList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.file.CreateOrderRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.file.CreateOrderRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.file.CreateOrderRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.file.CreateOrderRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        productId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        quantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.CreateOrderRequest}
 */
proto.file.CreateOrderRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.CreateOrderRequest();
  return proto.file.CreateOrderRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.CreateOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.CreateOrderRequest}
 */
proto.file.CreateOrderRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setProductId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setQuantity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.CreateOrderRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.file.CreateOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.CreateOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.CreateOrderRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.file.CreateOrderRequest.prototype.getUserId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.CreateOrderRequest} returns this
 */
proto.file.CreateOrderRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 product_id = 2;
 * @return {number}
 */
proto.file.CreateOrderRequest.prototype.getProductId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.CreateOrderRequest} returns this
 */
proto.file.CreateOrderRequest.prototype.setProductId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int64 quantity = 3;
 * @return {number}
 */
proto.file.CreateOrderRequest.prototype.getQuantity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.file.CreateOrderRequest} returns this
 */
proto.file.CreateOrderRequest.prototype.setQuantity = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.file.CreateOrderResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.file.CreateOrderResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.file.CreateOrderResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.file.CreateOrderResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        order:
          (f = msg.getOrder()) && proto.file.Order.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.CreateOrderResponse}
 */
proto.file.CreateOrderResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.CreateOrderResponse();
  return proto.file.CreateOrderResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.CreateOrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.CreateOrderResponse}
 */
proto.file.CreateOrderResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.file.Order();
        reader.readMessage(value, proto.file.Order.deserializeBinaryFromReader);
        msg.setOrder(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.CreateOrderResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.file.CreateOrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.CreateOrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.CreateOrderResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(1, f, proto.file.Order.serializeBinaryToWriter);
  }
};

/**
 * optional Order Order = 1;
 * @return {?proto.file.Order}
 */
proto.file.CreateOrderResponse.prototype.getOrder = function () {
  return /** @type{?proto.file.Order} */ (
    jspb.Message.getWrapperField(this, proto.file.Order, 1)
  );
};

/**
 * @param {?proto.file.Order|undefined} value
 * @return {!proto.file.CreateOrderResponse} returns this
 */
proto.file.CreateOrderResponse.prototype.setOrder = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.file.CreateOrderResponse} returns this
 */
proto.file.CreateOrderResponse.prototype.clearOrder = function () {
  return this.setOrder(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.CreateOrderResponse.prototype.hasOrder = function () {
  return jspb.Message.getField(this, 1) != null;
};

goog.object.extend(exports, proto.file);
